#include<stdio.h>
#include<gl/glut.h>

float v[3]={0,0,1};
float f=0;
float spin;
float rotAngle = 0.;
int xfcar=0;

void object()
{	
	//RIGHT TOP BOTTOM
	glPushMatrix();
	glColor3f(0.5,0.5,0.5);
	glTranslatef(3,2.9,1.1);
	glScalef(0.8,0.1,1.3);
	glutSolidCube(2);
	glPopMatrix();
	
	//RIGHTTOP MID
	glPushMatrix();
	glColor3f(0.6,0.6,0.6);
	glTranslatef(3,3,1.1);
	glScalef(0.5,0.3,1.1);
	glutSolidCube(2);
	glPopMatrix();

	//RIGHT TOP 
	glPushMatrix();
	glColor3f(0.7,0.7,0.7);
	glTranslatef(3,3.2,1.1);
	glScalef(0.2,0.3,1);
	glutSolidCube(2);
	glPopMatrix();
	
	//RIGHT SPHERE
	glPushMatrix();
	glColor3f(0.6,0.6,0.6);
	glTranslatef(3,3.6,1.1);
	glScalef(0.2,0.3,1);
	glutSolidSphere(0.5,10,10);
	glPopMatrix();
	
	//LEFT TOP BOTTOM
	glPushMatrix();
	glColor3f(0.5,0.5,0.5);
	glTranslatef(-3,2.9,1.1);
	glScalef(0.8,0.1,1.3);
	glutSolidCube(2);
	glPopMatrix();

	
	//LEFT TOP MID
	glPushMatrix();
	glColor3f(0.6,0.6,0.6);
	glTranslatef(-3,3,1.1);
	glScalef(0.5,0.3,1.1);
	glutSolidCube(2);
	glPopMatrix();

	//LEFT TOP
	glPushMatrix();
	glColor3f(0.7,0.7,0.7);
	glTranslatef(-3,3.2,1.1);
	glScalef(0.2,0.3,1);
	glutSolidCube(2);
	glPopMatrix();
	
	//LEFT SPHERE
	glPushMatrix();
	glColor3f(0.6,0.6,0.6);
	glTranslatef(-3,3.6,1.1);
	glScalef(0.2,0.3,1);
	glutSolidSphere(0.5,10,10);
	glPopMatrix();


	//LEFT BASE
	glPushMatrix();
	glColor3f(0.5,0.5,0.5);
	glTranslatef(3,0,1.1);
	glScalef(0.8,0.5,1.3);
	glutSolidCube(2);
	glPopMatrix();

	//RIGHT BASE
	glPushMatrix();
	glColor3f(0.5,0.5,0.5);
	glTranslatef(-3,0,1.1);
	glScalef(0.8,0.5,1.3);
	glutSolidCube(2);
	glPopMatrix();

	//RIGHT PILLER
	glPushMatrix();
	glColor3f(0.7,0.67,0.7);
	glTranslatef(3,1.5,.2);
	glScalef(.6,1.5,.2);
	glutSolidCube(2);
	glPopMatrix();

	glPushMatrix();
	glColor3f(0.7,0.67,0.7);
	glTranslatef(3,1.5,2);
	glScalef(.6,1.5,.2);
	glutSolidCube(2);
	glPopMatrix();
	
	//LEFT PILLER
	glPushMatrix();
	glColor3f(0.7,0.67,0.7);
	glTranslatef(-3,1.5,.2);
	glScalef(.6,1.5,.2);
	glutSolidCube(2);
	glPopMatrix();

	glPushMatrix();
	glColor3f(0.7,0.67,0.7);
	glTranslatef(-3,1.5,2);
	glScalef(.6,1.5,.2);
	glutSolidCube(2);
	glPopMatrix();



	
	//RIGHT PYRAMID
	glPushMatrix();
	glBegin(GL_POLYGON);
	glColor3f(0.2,0.2,0.2);
	glVertex3f(2.3,3.7,1);
	glColor3f(0.2,0.2,0.2);
	glVertex3f(3.7,3.7,1);
	glColor3f(0.8,0.8,0.8);
	glVertex3f(3,4.4,1);
	glEnd();
	glPopMatrix();
	
	//RIGHT PYRAMID
	glPushMatrix();
	glBegin(GL_POLYGON);
	glColor3f(0.2,0.2,0.2);
	glVertex3f(-2.3,3.7,1);
	glColor3f(0.2,0.2,0.2);
	glVertex3f(-3.7,3.7,1);
	glColor3f(0.8,0.8,0.8);
	glVertex3f(-3,4.4,1);
	glEnd();
	glPopMatrix();
	
	//LEFT BRIDGE ARM
	glPushMatrix();
	glTranslatef(2.2,.5,0.8);
	glRotatef(-rotAngle, 0.0, 0.0, 0.1);
	glBegin(GL_POLYGON);
	glColor3f(0.5,0.5,0.5);
	glVertex3f(-2.19,-0.2,1);
	glColor3f(0.5,0.5,0.5);
	glVertex3f(-2.19,0.2,1);
	glColor3f(0.8,0.8,0.8);
	glVertex3f(0,0.2,1);
	glColor3f(0.8,0.8,0.8);
	glVertex3f(0,-0.4,1);
	glEnd();
	glPopMatrix();

	glPushMatrix();
	glTranslatef(2.2,.5,1.8);
	glRotatef(-rotAngle, 0.0, 0.0, 0.1);
	glBegin(GL_POLYGON);
	glColor3f(0.5,0.5,0.5);
	glVertex3f(0,0,0);
	glColor3f(0.5,0.5,0.5);
	glVertex3f(-2.19,0,0);
	glColor3f(0.8,0.8,0.8);
	glVertex3f(-2.19,0,-1.4);
	glColor3f(0.8,0.8,0.8);
	glVertex3f(0,0,-1.4);
	glEnd();
	glPopMatrix();


	glPushMatrix();
	glTranslatef(2.2,.5,-0.6);
	glRotatef(-rotAngle, 0.0, 0.0, 0.1);
	glBegin(GL_POLYGON);
	glColor3f(0.5,0.5,0.5);
	glVertex3f(-2.19,-0.2,1);
	glColor3f(0.5,0.5,0.5);
	glVertex3f(-2.19,0.2,1);
	glColor3f(0.8,0.8,0.8);
	glVertex3f(0,0.2,1);
	glColor3f(0.8,0.8,0.8);
	glVertex3f(0,-0.4,1);
	glEnd();
	glPopMatrix();
	
	//RIGHT BRIDGE ARM
	glPushMatrix();
	glTranslatef(-2.2,0.5,0.8);
	glRotatef(rotAngle, 0.0, 0.0, 0.1);
	glBegin(GL_POLYGON);
	glColor3f(0.5,0.5,0.5);
	glVertex3f(2.19,-0.2,1);
	glColor3f(0.5,0.5,0.5);
	glVertex3f(2.19,0.2,1);
	glColor3f(0.8,0.8,0.8);
	glVertex3f(0,0.2,1);
	glColor3f(0.8,0.8,0.8);
	glVertex3f(0,-0.4,1);
	glEnd();
	glPopMatrix();

	glPushMatrix();
	glTranslatef(-2.2,.5,1.8);
	glRotatef(rotAngle, 0.0, 0.0, 0.1);
	glBegin(GL_POLYGON);
	glColor3f(0.5,0.5,0.5);
	glVertex3f(0,0,0);
	glColor3f(0.5,0.5,0.5);
	glVertex3f(2.19,0,0);
	glColor3f(0.8,0.8,0.8);
	glVertex3f(2.19,0,-1.4);
	glColor3f(0.8,0.8,0.8);
	glVertex3f(0,0,-1.4);
	glEnd();
	glPopMatrix();

	glPushMatrix();
	glTranslatef(-2.2,0.5,-0.6);
	glRotatef(rotAngle, 0.0, 0.0, 0.1);
	glBegin(GL_POLYGON);
	glColor3f(0.5,0.5,0.5);
	glVertex3f(2.19,-0.2,1);
	glColor3f(0.5,0.5,0.5);
	glVertex3f(2.19,0.2,1);
	glColor3f(0.8,0.8,0.8);
	glVertex3f(0,0.2,1);
	glColor3f(0.8,0.8,0.8);
	glVertex3f(0,-0.4,1);
	glEnd();
	glPopMatrix();

	/*MIDDLE LANE 1
	glPushMatrix();	
	glBegin(GL_POLYGON);
	glColor3f(0.8,0.8,0.8);
	glVertex3f(2,3.2,1);
	glColor3f(0.3,0.3,0.3);
	glVertex3f(2,3.5,1);
	glColor3f(0.3,0.3,0.3);
	glVertex3f(-2,3.5,1);
	glColor3f(0.8,0.8,0.8);
	glVertex3f(-2,3.2,1);
	glEnd();
	glPopMatrix();*/

	//MIDDLE LANE 2
	glPushMatrix();
	glTranslatef(0,2.7,0.2);
	glScalef(4.8,0.16,0.2);
	glutSolidCube(1);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(0,2.7,2);
	glScalef(4.8,0.16,0.2);
	glutSolidCube(1);
	glPopMatrix();

	//ROAD
	glPushMatrix();
	glTranslatef(-4.55,0.4,1.1);
	glScalef(1.5,0.2,1.8);
	glutSolidCube(1);
	glPopMatrix();
	
	glPushMatrix();
	glTranslatef(4.55,0.4,1.1);
	glScalef(1.5,0.2,1.8);
	glutSolidCube(1);
	glPopMatrix();


	// CAR

	//BODY
	glPushMatrix();
	xfcar=-4.55+f;
	glColor3f(0,0.5,0.9);
	glTranslatef(-4.55+f,0.8,1.1);

	glScalef(1,.3,0.75);
	glutSolidCube(1);
	glPopMatrix();

	glPushMatrix();
	glColor3f(0.3,0.8,1);
	glTranslatef(-4.65+f,1.1,1.1);
	
	glScalef(0.6,.3,0.6);
	glutSolidCube(1);
	glPopMatrix();

	//HEAD LIGHT
	glPushMatrix();
	glColor3f(1,0,0);
	glTranslatef(-4.05+f,0.8,1.3);
	
	glScalef(0.2,0.2,.3);
	glutSolidSphere(0.3,10,10);
	glPopMatrix();
	
	glPushMatrix();
	glColor3f(1,0,0);
	glTranslatef(-4.05+f,0.8,0.9);

	glScalef(0.2,0.2,.3);
	glutSolidSphere(0.3,10,10);
	glPopMatrix();


	//WHEELS
	glPushMatrix();
	glColor3f(0.1,0.1,0.1);
	glTranslatef(-4.3+f,0.6,1.4);
	
	glScalef(0.4,0.4,0);
	glutSolidSphere(0.25,10,10);
	glPopMatrix();
	
	glPushMatrix();
	glColor3f(0.1,0.1,0.1);
	glTranslatef(-4.8+f,0.6,1.4);
	
	glScalef(0.4,0.4,0);
	glutSolidSphere(0.25,10,10);
	glPopMatrix();
	
	glPushMatrix();
	glColor3f(0.1,0.1,0.1);
	glTranslatef(-4.3+f,0.6,0.8);
	
	glScalef(0.4,0.4,0);
	glutSolidSphere(0.25,10,10);
	glPopMatrix();
	
	glPushMatrix();
	glColor3f(0.1,0.1,0.1);
	glTranslatef(-4.8+f,0.6,0.8);
	
	glScalef(0.4,0.4,0);
	glutSolidSphere(0.25,10,10);
	glPopMatrix();




}

void display()
{

	glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
	glLoadIdentity();
	gluLookAt(v[0],v[1],v[2],0,-0.3,0,0,0.1,0);
	object();
	glFlush();


}	
void key(unsigned char p,int x,int y)
{
	switch(p)
	{
		case 'x':v[0]=v[0]+0.1;
				 break;
		case 'y':v[1]=v[1]+0.1;
				 break;
		case 'z':v[2]=v[2]+0.1;
				 break;
		case 'X':v[0]=v[0]-0.1;
				 break;
		case 'Y':v[1]=v[1]-0.1;
				 break;
		case 'Z':v[2]=v[2]-0.1;
				 break;
		case 'o':
		case 'O':if(xfcar<=-4 || xfcar>=4)
				 {
			         rotAngle += 5.;
					if (rotAngle >= 60.)
					{	
						rotAngle = 60.;
					}
				 }
				glutPostRedisplay();	
				break;
	  	case 'c':
		case 'C':if (rotAngle != 0.)
					rotAngle -= 5.;	
		 		 glutPostRedisplay();	
				break;
		case 'f':if( rotAngle<=0 && xfcar<=4.2)
				 {
					f+=0.2;
				 }
				break;
		case 'r':if( rotAngle<=0 && xfcar>=-4.2)
					f-=0.2;
				break;
	}
	display();
}

void init()
{
	glClearColor(0,0,0,0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glOrtho(-5,5,-5,5,-10,10);
	glMatrixMode(GL_MODELVIEW);
}

void main(int argc,char *argv[])
{

	printf("Press 'f' to move car in forward direction\n");
	printf("Press 'o' to open bridge\n");
	printf("press 'r' to move car in reverse direction\n");
	printf("Press '	c' to close bridge\n");
	printf("Press 'x' or 'y' or 'z' to rotate bridge in different direction\n");


	glutInitDisplayMode(GLUT_SINGLE|GLUT_DEPTH);
	glutInitWindowSize(1000,760);
	glutCreateWindow("3D Manhatten Project");
	init();
	glutDisplayFunc(display);
	glutKeyboardFunc(key);
	glEnable(GL_DEPTH_TEST);
	glutMainLoop();
}

